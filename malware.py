# -*- coding: utf-8 -*-
"""
Created on Fri Nov 13 21:20:07 2020

@author: asus
"""
import pandas as pd

dataset=pd.read_csv('req.csv')
X=dataset.iloc[:,1:-1].values
y=dataset.iloc[:,-1].values

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3)

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier(n_estimators=100)
rfc.fit(X_train,y_train)
y_pred=rfc.predict(X_test)
y_pred_try=rfc.predict(X_train)

from sklearn.metrics import confusion_matrix,classification_report
cm=confusion_matrix(y_test,y_pred)
print(cm)

rep=classification_report(y_test,y_pred)
print(rep)
rep_try=classification_report(y_train,y_pred_try)


#%%

from sklearn.linear_model import RidgeClassifier

rdg=RidgeClassifier(2)
rdg.fit(X_train,y_train)
y_rdg=rdg.predict(X_test)

rep_rdg=classification_report(y_test,y_rdg)
coeff=rdg.coef_



#%%
master=[]
tot_var=[]
for c in (0.08,0.09,0.1,0.11,0.12,0.13,0.14):
    coeff_1=(coeff>c).astype(int)
    coeff_2=(coeff<-c).astype(int)

    lst=list(coeff_1)
    lst_2=list(coeff_2)
    lst=[a for a in lst[0]]
    lst_2=[b for b in lst_2[0]]

    indx=[]
    for i in range(len(lst)):
        if lst[i]==1:
            indx.append(i)

    for j in range(len(lst_2)):
        if lst_2[j]==1:
            indx.append(j)

    cols=sorted(indx)

    X_opt=dataset.iloc[:,cols[1:]].values
    y_opt=dataset.iloc[:,-1].values

    from sklearn.model_selection import train_test_split
    X_opt_train,X_opt_test,y_opt_train,y_opt_test=train_test_split(X_opt,y_opt,test_size=0.3)

    from sklearn.ensemble import RandomForestClassifier
    rfc=RandomForestClassifier(n_estimators=100)
    rfc.fit(X_opt_train,y_opt_train)
    y_pred_opt=rfc.predict(X_opt_test)



    rep_opt=classification_report(y_opt_test,y_pred_opt)
    print(rep_opt)
    print(c)
    master.append(rep_opt)
    tot_var.append(len(indx))


#%%


import matplotlib.pyplot as plt
import numpy as np

x_ax=[i for i in range(len(coeff[0]))]
plt.scatter(x_ax,coeff[0],alpha=0.7)



#%%
"""
cols=sorted(indx)

X_opt=dataset.iloc[:,cols[1:]].values
y_opt=dataset.iloc[:,-1].values

from sklearn.model_selection import train_test_split
X_opt_train,X_opt_test,y_opt_train,y_opt_test=train_test_split(X_opt,y_opt,test_size=0.3)

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier(n_estimators=100)
rfc.fit(X_opt_train,y_opt_train)
y_pred_opt=rfc.predict(X_opt_test)


from sklearn.metrics import confusion_matrix,classification_report
cm_opt=confusion_matrix(y_opt_test,y_pred_opt)
print(cm_opt)

rep_opt=classification_report(y_opt_test,y_pred_opt)
print(rep_opt)

rep_tr=classification_report(y_opt_train, y_pred)
"""

#%%
"""
from sklearn.svm import SVC

svc=SVC(class_weight='balanced')
svc.fit(X_opt_train,y_opt_train)
y_pred_svc=svc.predict(X_opt_test)

cm_svc=confusion_matrix(y_opt_test,y_pred_svc)
print(cm_svc)
rep_svc=classification_report(y_opt_test,y_pred_svc)
print(rep_svc)
"""

#%%

"""
from sklearn.linear_model import LogisticRegression

lr=LogisticRegression(max_iter=1000,class_weight='balannced')
lr.fit(X_opt_train,y_opt_train)
y_pred_lr=lr.predict(X_opt_test)

cm_lr=confusion_matrix(y_opt_test,y_pred_lr)
print(cm_lr)
rep_lr=classification_report(y_opt_test,y_pred_lr)
print(rep_lr) 
"""


#%%
#F-1 plot
import matplotlib.pyplot as plt
f1=[0.66,0.64,0.63,0.59,0.57,0.54,0.55]
x=[0.08,0.09,0.1,0.11,0.12,0.13,0.14]
plt.plot(x,f1)
plt.legend(['F-1 Score'])

plt.plot(x,tot_var)
plt.legend(['Number of variables'])


#%%
coeff_1=(coeff>0.1).astype(int)
coeff_2=(coeff<-0.1).astype(int)

lst=list(coeff_1)
lst_2=list(coeff_2)
lst=[a for a in lst[0]]
lst_2=[b for b in lst_2[0]]

indx=[]
for i in range(len(lst)):
    if lst[i]==1:
        indx.append(i)

for j in range(len(lst_2)):
    if lst_2[j]==1:
        indx.append(j)

cols=sorted(indx)

X_opt=dataset.iloc[:,cols[1:]].values
y_opt=dataset.iloc[:,-1].values

from sklearn.model_selection import train_test_split
X_opt_train,X_opt_test,y_opt_train,y_opt_test=train_test_split(X_opt,y_opt,test_size=0.3)

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier(n_estimators=100)
rfc.fit(X_opt_train,y_opt_train)
y_pred_opt=rfc.predict(X_opt_test)



rep_opt=classification_report(y_opt_test,y_pred_opt)
print(rep_opt)
    

#%%
"""
var_opt=[]
for q in indx:
    var_opt.append([q,coeff[0][q]])
"""












